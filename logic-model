import matplotlib.pyplot as plt
import numpy as np
def stocgradascent1(datamatrix,classlabels,numiter=150):#如果总共100条数据，一条一条 更新权重为随机梯度上升算法
    m,n=np.shape(datamatrix)#m=100，n=3
    weights=np.ones(n)
    for j in range(numiter):
        dataindex=range(m)
        for i in range(m):
             alpha=4/(1.0+j+i)+0.01
             randindex=int(np.random.uniform(0,len(dataindex)))
             h=sigmoid(sum(datamatrix[randindex]*weights))
             error=classlabels[randindex]-h
             weights=weights+alpha*error*datamatrix[randindex]
             del(list(dataindex)[randindex])
    return weights
def stocgradascent0(datamatrix,classlabels):#如果总共100条数据，一条一条 更新权重为随机梯度上升算法
    m,n=np.shape(datamatrix)#m=100，n=3
    alpha=0.01
    weights=np.ones(n)
    for i in range(m):
        h=sigmoid(sum(datamatrix[i]*weights))
        error=classlabels[i]-h
        weights=weights+alpha*error*datamatrix[i]
    return weights

def plotbestfit(wei):
    weights=wei
    datamat,labelmat=loaddataset()
    dataarr=np.array(datamat)
    n=np.shape(dataarr)[0]
    xcord1=[];ycord1=[]
    xcord2=[];ycord2=[]
    for i in range(n):
        if int(labelmat[i])==1:
            xcord1.append(dataarr[i,1]);ycord1.append(dataarr[i,2])
        else:
            xcord2.append(dataarr[i,1]);ycord2.append(dataarr[i,2])
    fig=plt.figure()
    ax=fig.add_subplot(111)
    ax.scatter(xcord1,ycord1,s=30,c='red',marker='s')
    ax.scatter(xcord2,ycord2,s=30,c='green')
    x=np.arange(-3.0,3.0,0.1)
    y=(-weights[0]-weights[1]*x)/weights[2]
    ax.plot(x,y)
    plt.xlabel('X1');plt.ylabel('X2');
    plt.show()
def loaddataset():
    datamat=[];labelmat=[]
    fr=open('testSet.txt')
    for line in fr.readlines():
        linearr=line.strip().split()
        datamat.append([1.0,float(linearr[0]),float(linearr[1])])
        labelmat.append(int(linearr[2]))
    return datamat,labelmat
def sigmoid(inx):
    return 1.0/(1+np.exp(-inx))
def gradascent(datamatin,classlabels):#梯度上升算法--整个数据集一起更新
    datamatrix=np.mat(datamatin)#创建矩阵
    labelmat=np.mat(classlabels).transpose()
    m,n=np.shape(datamatrix)
    alpha=0.001
    maxcycles=500
    weights=np.ones((n,1))
    for k in range(maxcycles):
        h=sigmoid(datamatrix*weights)#[100x3]*[3x1]
        error=(labelmat-h)
        weights=weights+alpha*datamatrix.transpose()*error
    return weights
dataarr,labelmat=loaddataset()
weights=stocgradascent1(np.array(dataarr),labelmat)
plotbestfit(weights)
