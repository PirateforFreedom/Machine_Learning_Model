import numpy as npdef adaclassify(dattoclass,classifierarr):    datamatrix=np.mat(dattoclass)    m=np.shape(datamatrix)[0]    aggclassest=np.mat(np.zeros((m,1)))    for i in range(len(classifierarr)):        classest=stumpclassify(datamatrix,classifierarr[i]['dim'],                               classifierarr[i]['thresh'],                               classifierarr[i]['ineq'])        aggclassest+=classifierarr[i]['alpha']*classest        print(aggclassest)    return np.sign(aggclassest)def adaboosttrainds(dataarr,classlabels,numit=4.0):    weakclassarr=[]    m=np.shape(dataarr)[0]    d=np.mat(np.ones((m,1))/m)    aggclassest=np.mat(np.zeros((m,1)))    for i in range(numit):        beststump,error,classest=buildstump(dataarr,classlabels,d)        print(d.T)        alpha=float(0.5*np.log((1.0-error)/max(error,1e-16)))        beststump['alpha']=alpha        weakclassarr.append(beststump)        #print(weakclassarr)        print(classest.T)        expon=np.multiply(-1*alpha*np.mat(classlabels).T,classest)        d=np.multiply(d,np.exp(expon))        d=d/d.sum()        aggclassest+=alpha*classest        print(aggclassest.T)        aggerrors=np.multiply(np.sign(aggclassest)!=np.mat(classlabels).T,np.ones((m,1)))        errorrate=aggerrors.sum()/m        print(errorrate,"\n")        if errorrate==0.0:break    return weakclassarrdef stumpclassify(datamatrix,dimen,threshval,threshineq):    retarray=np.ones((np.shape(datamatrix)[0],1))    if threshineq=='lt':        retarray[datamatrix[:,dimen]<=threshval]=-1.0    else:        retarray[datamatrix[:,dimen]>threshval]=-1.0    return retarraydef buildstump(dataarr,classlabels,d):    datamatrix=np.mat(dataarr);labelmat=np.mat(classlabels).T    m,n=np.shape(datamatrix)#5,2    numsteps=10.0;beststump={};bestclassest=np.mat(np.zeros((m,1)))    minerror=np.inf#正无穷    for i in range(n):        rangemin=datamatrix[:,i].min();rangemax=datamatrix[:,i].max();#每一列特征值的最小值和最大值        stepsize=(rangemax-rangemin)/numsteps        for j in range(-1,int(numsteps)+1):            for inequal in ['lt','gt']:                threshval=(rangemin+float(j)*stepsize)                #print(threshval)                predictedvals=stumpclassify(datamatrix,i,threshval,inequal)                errarr=np.mat(np.ones((m,1)))                errarr[predictedvals==labelmat]=0                #print(errarr)                weightederror=d.T*errarr                #print("split:dim %d,thresh%.2f,thresh ineqal:%s,the weighted error is %.3f"% (i,threshval,inequal,weightederror))                if weightederror<minerror:                    minerror=weightederror                    bestclassest=predictedvals.copy()                    beststump['dim']=i                    beststump['thresh']=threshval                    beststump['ineq']=inequal    return beststump,minerror,bestclassestdef loadsimpdata():    datamat=np.matrix([[1.,2.1],                   [2.,1.1],                   [1.3,1.],                   [1.,1.],                   [2.,1.]])    classlabels=[1.0,1.0,-1.0,-1.0,1.0]    return datamat,classlabelsdatmat,classlabes=loadsimpdata()classifierarray=adaboosttrainds(datmat,classlabes,9)print(classifierarray)
