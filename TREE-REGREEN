import numpy as np
def regtreeeval(model,inDat):
    return float(model)
def modelTreeEval(model,inDat):
    n=np.shape(inDat)[1]
    x=np.mat(np.ones((1,n+1)))
    x[:,1:n+1]=inDat
    return float(x*model)
def treeForeCast(tree,inData,modelEval=regtreeeval):
    if not istree(tree):return modelEval(tree,inData)
    if inData[tree['spind']]>tree['spval']:
        if istree(tree['left']):
            return treeForeCast(tree['left'],inData,modelEval)
        else:
            return modelEval(tree['left'],inData)
    else:
            if istree(tree['right']):
                return treeForeCast(tree['right'],inData,modelEval)
            else:
                return modelEval(tree['right'],inData)
def createForeCast(tree,testData,modelEval=regtreeeval):
    m=len(testData)
    yhat=np.mat(np.zeros((m,1)))
    for i in range(m):
        yhat[i,0]=treeForeCast(tree,np.mat(testData[i]),modelEval)
    return yhat
def linearsolve(dataset):
    m,n=np.shape(dataset)
    x=np.mat(np.ones((m,n)));y=np.mat(np.ones((m,1)))
    x[:,1:n]=dataset[:,0:n-1];y=dataset[:,-1]
    xtx=x.T*x
    if np.linalg.det(xtx)==0.0:
        raise NameError("sd")
    ws=xtx.I*(x.T*y)
    return ws,x,y
def modelleaf(dataset):
    ws,x,y=linearsolve(dataset)
    return ws
def modelerr(dataset):
    ws,x,y=linearsolve(dataset)
    yhat=x*ws
    return sum(np.power(y-yhat,2))
def istree(obj):
    return (type(obj).__name__=='dict')
def getmean(tree):
    if istree(tree['right']):tree['right']=getmean(tree['right'])
    if istree(tree['left']):tree['left']=getmean(tree['left'])
    return (tree['left']+tree['right'])/2.0
def prune(tree,testdata):
    if np.shape(testdata)[0]==0:return getmean(tree)
    if(istree(tree['right']) or istree(tree['left'])):
        lset,rset=binsplitdataset(testdata,tree['spind'],tree['spval'])
    if istree(tree['left']):tree['left']=prune(tree['left'],lset)
    if istree(tree['right']):tree['right']=prune(tree['right'],rset)
    if not istree(tree['left']) and not istree(tree['right']):
        lset,rset=binsplitdataset(testdata,tree['spind'],tree['spval'])
        errornomerge=sum(np.power(lset[:,-1]-tree['left'],2))+sum(np.power(rset[:,-1]-tree['right'],2))
        treemean=(tree['left']+tree['right'])/2.0
        errormerge=sum(np.power(testdata[:,-1]-treemean,2))
        if errormerge<errornomerge:
            print("merging")
            return treemean
        else:return tree
    else:return tree
def regleaf(dataset):
    return np.mean(dataset[:,-1])
def regerr(dataset):
    return np.var(dataset[:,-1])*np.shape(dataset)[0]
def choosebestsplit(dataset,leaftype=regleaf,errtype=regerr,ops=(1,4)):
    tols=ops[0];toln=ops[1]
    if len(set(dataset[:,-1].T.tolist()[0]))==1:
        return None,leaftype(dataset)
    m,n=np.shape(dataset)
    s=errtype(dataset)
    bests=np.inf;bestindex=0;bestvalue=0
    for featindex in range(n-1):
        for splitval in set((dataset[:,featindex].T.A.tolist())[0]):
            mat0,mat1=binsplitdataset(dataset,featindex,splitval)
            if(np.shape(mat0)[0]<toln) or (np.shape(mat1)[0]<toln):continue
            news=errtype(mat0)+errtype(mat1)
            if news<bests:
                bestindex=featindex
                bestvalue=splitval
                bests=news
    if(s-bests)<tols:
        return None,leaftype(dataset)
    mat0,mat1=binsplitdataset(dataset,bestindex,bestvalue)
    if(np.shape(mat0)[0]<toln) or (np.shape(mat1)[0] <toln):
        return None,leaftype(dataset)
    return bestindex,bestvalue
def loaddataset(filename):
    datamat=[]
    fr=open(filename)
    for line in fr.readlines():
        curline=line.strip().split('\t')
        fltline=list(map(float,curline))
        datamat.append(fltline)
    return datamat
def binsplitdataset(dataset,feature,value):
    mat0=dataset[np.nonzero(dataset[:,feature]>value)[0],:]
    mat1=dataset[np.nonzero(dataset[:,feature]<=value)[0],:]
    return mat0,mat1
def createtree(dataset,leaftype=regleaf,errtype=regerr,ops=(1,4)):
    feat,val=choosebestsplit(dataset,leaftype,errtype,ops)
    if feat==None:return val
    rettree={}
    rettree['spind']=feat
    rettree['spval']=val
    lset,rset=binsplitdataset(dataset,feat,val)
    rettree['left']=createtree(lset,leaftype,errtype,ops)
    rettree['right']=createtree(rset,leaftype,errtype,ops)
    return rettree
trainmat=np.mat(loaddataset('bikeSpeedVsIq_train.txt'))
testmat=np.mat(loaddataset('bikeSpeedVsIq_test.txt'))
mytree=createtree(trainmat,ops=(1,20))
yhat=createForeCast(mytree,testmat[:,0])
bh=np.corrcoef(yhat,testmat[:,1],rowvar=0)[0,1]
print(bh)
mytree=createtre
#mymat2=np.mat(loaddataset('exp2.txt'))
#extree=createtree(mymat2,modelleaf,modelerr,(1,10))
#print(extree)
#mydat2=loaddataset('ex2.txt')
#mymat2=np.mat(mydat2)
#mytree=createtree(mymat2,ops=(0,1))
#mydattest=loaddataset('ex2test.txt')
#mymat2test=np.mat(mydattest)
#mypruntree=prune(mytree,mymat2test)
#print(mypruntree)
