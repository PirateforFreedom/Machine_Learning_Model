import os
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'
import tensorflow as tf
import input_data
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)#数据集
x=tf.placeholder("float",[None,784])#输入变量，承载数据集
w=tf.Variable(tf.zeros([784,10]))#权重w
b=tf.Variable(tf.zeros([10]))#偏置b
y=tf.nn.softmax(tf.matmul(x,w)+b)#目标函数 objective function
y_=tf.placeholder("float",[None,10])#实际的分布-标签
cross_entropy=-tf.reduce_sum(y_*tf.log(y))
train_step=tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)
init=tf.initialize_all_variables()
sess=tf.Session()
sess.run(init)

for i in range(1000):
    batch_xs,batch_ys=mnist.train.next_batch(100)#批量训练
    sess.run(train_step,feed_dict={x:batch_xs,y_:batch_ys})
    
correct_prediction=tf.equal(tf.arg_max(y,1),tf.arg_max(y_,1))
accuracy=tf.reduce_mean(tf.cast(correct_prediction,"float"))
print(sess.run(accuracy,feed_dict={x:mnist.test.images,y_: mnist.test.labels}))#预测
